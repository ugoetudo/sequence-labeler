[{"/home/priyankar/Downloads/sequence-labeler/src/index.js":"1","/home/priyankar/Downloads/sequence-labeler/src/components/Annotation.js":"2","/home/priyankar/Downloads/sequence-labeler/src/components/Token.js":"3","/home/priyankar/Downloads/sequence-labeler/src/components/Controls.js":"4","/home/priyankar/Downloads/sequence-labeler/src/components/JobTracker.js":"5","/home/priyankar/Downloads/sequence-labeler/src/components/instructions.js":"6","/home/priyankar/Downloads/sequence-labeler/src/components/Navigation.js":"7"},{"size":4428,"mtime":1686501438507,"results":"8","hashOfConfig":"9"},{"size":967,"mtime":1686500743005,"results":"10","hashOfConfig":"9"},{"size":832,"mtime":1686500797573,"results":"11","hashOfConfig":"9"},{"size":2700,"mtime":1686500759217,"results":"12","hashOfConfig":"9"},{"size":691,"mtime":1686500774873,"results":"13","hashOfConfig":"9"},{"size":1553,"mtime":1686499764528,"results":"14","hashOfConfig":"9"},{"size":8437,"mtime":1686501487739,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},"1ua8xm3",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/priyankar/Downloads/sequence-labeler/src/index.js",["33","34","35","36"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport DataFrame from 'dataframe-js';\nimport './index.css';\n//import App from './App';\nimport {\n  BrowserRouter as Router,\n  Route,\n} from 'react-router-dom'\nimport {v4 as uuidv4} from 'uuid';\nimport Navigation from './components/Navigation';\n\nconst api_base_url = 'https://opim-big-data-analytics.ue.r.appspot.com';\n//const api_base_url = 'http://localhost:9000'\nconst api_name = 'entity_recog';\n\n\nclass HIT extends React.Component {\n  //this class handles data interchange for the display of the correct observation\n  //at any state of the application. it parameterizes the Navigation component\n  constructor(props){\n    super(props);\n    this.state = {\n      hitid: null,\n      observations: null,\n      responseReady: true,\n      turkid: null,\n      redirect_to_submit: null,\n      annotations: null,\n      hit_length: 0,\n    };\n    this.url_query = new URLSearchParams(this.props.location.search);\n    this.getNext = this.getNext.bind(this);\n    this.getLast = this.getLast.bind(this);\n    //this.submitHIT = this.submitHIT.bind(this);\n  }\n\n  //a good way to think of callAPI is as the refresher. it makes sure that\n  //whenever it is called, the next to be annotated observation is served up\n  callAPI() {\n    this.setState({responseReady:false});\n    const api_url = `${api_base_url}/${api_name}/getObservation?hitid=${this.url_query.get('htid')}`+\n    `&turkid=${this.url_query.get('workerId')}`;\n    const status_call = `${api_base_url}/${api_name}/HITLength?hitid=${this.url_query.get('htid')}`;\n    console.log(api_url);\n    fetch(api_url).then(res => res.json())\n        .then(data => {\n          console.log(data);\n          //expect data to have sid, tkid, token_text, rank_value\n          this.setState({observations: data});\n          this.setState({responseReady: true});\n      }).then(fetch(status_call).then(res => res.json()).then(data => {\n        console.log(data)\n        this.setState({hit_length: data[0].cnt})\n        }));\n  }\n  \n  componentDidMount() {\n    //upon initial load, we want to make sure that there is a call to get the\n    //current valid hit\n    this.callAPI();\n  }\n\n  getNext(annotations) {\n    const api_url = `${api_base_url}/entity_recog/submitAnnotation?hitid=${this.url_query.get('htid')}`+\n                    `&turkid=${this.url_query.get('workerId')}`+\n                    `&tkids=${JSON.stringify(annotations)}&sid=${this.state.observations[0].sid}`;\n    console.log(api_url);\n    fetch(api_url).then(res => res.json()).then(data => {\n      if (data.status == 'OK') {\n        this.callAPI();\n      }\n    });\n  }\n  getLast() {\n    var rank_value = this.state.observations[0].rank_value;\n    if (rank_value > 1) {\n      this.setState({responseReady:false});\n      const api_url = `${api_base_url}/entity_recog/getObservationByRank?hitid=${this.url_query.get('htid')}`+\n                      `&value_rank=${rank_value}&turkid=${this.url_query.get('workerId')}`;\n      console.log(api_url);\n      fetch(api_url).then(res => res.json()).then(data => {\n        console.log(data); \n        this.setState({observations: data[1]});\n        this.setState({responseReady:true});\n        this.setState({annotations: data[0]});\n      });\n    }\n  }\n\n  render() {\n    /*\n    if (this.state.redirect_to_submit) {\n      return (\n        <Redirect to={this.state.redirect_to_submit} ></Redirect>\n      );\n    }\n    */\n    if (this.state.responseReady && this.state.observations && this.state.hit_length > 0) {\n      return (\n        //Navigation should look similar to Observation from the google place\n        <div>\n          <Navigation \n            tokens={this.state.observations}\n            annotations={this.state.annotations}\n            hit_length={this.state.hit_length}\n            rank_val={this.state.observations[0].rank_value}\n            onNextClick={this.getNext}\n            onBackClick={this.getLast} \n            assignmentId={this.url_query.get('assignmentId')}/>\n          \n        </div>\n      );\n    } else if (!this.state.observations) {\n      return (<p>this HIT is complete!! please close this window.</p>)\n    } else\n    {\n      return (\n        <img src=\"https://upload.wikimedia.org/wikipedia/commons/b/b1/Loading_icon.gif\" />\n      );\n    }\n  }\n}\n\nReactDOM.render(\n  <Router>\n    <div>\n      <Route exact path='/entity_recog' component={HIT}/>\n    </div>\n  </Router>,\n  document.getElementById('root')\n);",["37","38"],"/home/priyankar/Downloads/sequence-labeler/src/components/Annotation.js",[],"/home/priyankar/Downloads/sequence-labeler/src/components/Token.js",[],"/home/priyankar/Downloads/sequence-labeler/src/components/Controls.js",[],"/home/priyankar/Downloads/sequence-labeler/src/components/JobTracker.js",[],["39","40"],"/home/priyankar/Downloads/sequence-labeler/src/components/instructions.js",[],"/home/priyankar/Downloads/sequence-labeler/src/components/Navigation.js",["41","42"],{"ruleId":"43","severity":1,"message":"44","line":3,"column":8,"nodeType":"45","messageId":"46","endLine":3,"endColumn":17},{"ruleId":"43","severity":1,"message":"47","line":10,"column":15,"nodeType":"45","messageId":"46","endLine":10,"endColumn":21},{"ruleId":"48","severity":1,"message":"49","line":70,"column":23,"nodeType":"50","messageId":"51","endLine":70,"endColumn":25},{"ruleId":"52","severity":1,"message":"53","line":119,"column":9,"nodeType":"54","endLine":119,"endColumn":91},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"55","replacedBy":"59"},{"ruleId":"57","replacedBy":"60"},{"ruleId":"48","severity":1,"message":"49","line":101,"column":60,"nodeType":"50","messageId":"51","endLine":101,"endColumn":62},{"ruleId":"43","severity":1,"message":"61","line":105,"column":20,"nodeType":"45","messageId":"46","endLine":105,"endColumn":22},"no-unused-vars","'DataFrame' is defined but never used.","Identifier","unusedVar","'uuidv4' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-native-reassign",["62"],"no-negated-in-lhs",["63"],["62"],["63"],"'cs' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]